source code link:
http://localhost:8888/notebooks/VED1.ipynb#

import pandas as pd
import numpy as nup
import glob
import soundfile
import os
import sys

pip install SoundFile

import librosa
import librosa.display
import seaborn as sbn
import matplotlib.pyplot as mplt
from sklearn import metrics

!pip install librosa

from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score

from IPython.display import Audio

import warnings
if not sys.warnoptions:
  warnings.simplefilter("ignore")
warnings.filterwarnings("ignore", category=DeprecationWarning)  

RavdessData = "E:\\clg book materials\\SEM-5\\RavdessData\\"

import os
import pandas
ravdessDirectoryList = os.listdir(RavdessData)
fileEmotion = []
filePath = []
for dir in ravdessDirectoryList:
    actor = os.listdir(RavdessData + dir)
    for file in actor:
        part = file.split(".")[0]
        part = part.split("-")
        fileEmotion.append(int(part[2]))
        filePath.append(RavdessData + dir + '/' + file)
emotion_df = pandas.DataFrame(fileEmotion, columns=['Emotions'])  
path_df = pandas.DataFrame(filePath, columns=['Path'])
Ravdess_df = pandas.concat([emotion_df, path_df], axis=1 )

Ravdess_df.Emotions.replace({1:'neutral', 2:'calm', 3:'happy', 4:'sad', 5:'angry', 6:'fear', 7:'disgust', 8:'surprise'}, inplace=True)
Ravdess_df.head(50)

data_path = pandas.concat([Ravdess_df], axis = 0)
data_path.to_csv("data_path.csv",index=False)
data_path.head()

pip install matplotlib

pip install seaborn

pip install seaborn[stats]

from matplotlib import pyplot as mplt
import seaborn as sbn
import librosa.display
sbn.countplot(x='Emotions',data=data_path)
mplt.title('Count of Emotions', size=16)
mplt.xlabel('Emotions', size=24)
mplt.ylabel('Count', size=24)
sbn.despine(top=True, right=True, left=True, bottom=True)
mplt.show()

def create_waveplot(data, sr, e):
    mplt.figure(figsize=(10, 3))
    mplt.title('Waveplot for audio with {} emotion'.format(e), size=15)
    librosa.display.waveshow(data, sr=sr)
    mplt.show()

def create_spectrogram(data, sr, e):
    # stft function converts the data into short term fourier transform
    X = librosa.stft(data)
    Xdb = librosa.amplitude_to_db(abs(X))
    mplt.figure(figsize=(12, 3))
    mplt.title('Spectrogram for audio with {} emotion'.format(e), size=15)
    librosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz')   
    #librosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='log')
    mplt.colorbar()

emotion='fear'
path = nup.array(data_path.Path[data_path.Emotions==emotion])[1]
data, sampling_rate = librosa.load(path)
librosa.display.waveshow(data, sampling_rate)
create_waveplot(data, sampling_rate, emotion)
create_spectrogram(data, sampling_rate, emotion)
Audio(path)

emotion='angry'
path = nup.array(data_path.Path[data_path.Emotions==emotion])[1]
data, sampling_rate = librosa.load(path)
librosa.display.waveshow(data, sampling_rate)
create_waveplot(data, sampling_rate, emotion)
create_spectrogram(data, sampling_rate, emotion)
Audio(path)

emotion='happy'
path = nup.array(data_path.Path[data_path.Emotions==emotion])[1]
data, sampling_rate = librosa.load(path)
librosa.display.waveshow(data, sampling_rate)
create_waveplot(data, sampling_rate, emotion)
create_spectrogram(data, sampling_rate, emotion)
Audio(path)

def noise(data):
    noiseAmp = 0.035*nup.random.uniform()*nup.amax(data)
    data = data + noiseAmp*nup.random.normal(size=data.shape[0])
    return data

def stretch(data, rate=0.8):
    return librosa.effects.time_stretch(data, rate)

def shift(data):
    shiftRange = int(nup.random.uniform(low=-5, high = 5)*1000)
    return nup.roll(data, shiftRange)

def pitch(data, samplingRate, pitchFactor=0.7):
    return librosa.effects.pitch_shift(data, sampling_rate, pitchFactor)

x = noise(data)
mplt.figure(figsize=(14,4))
librosa.display.waveshow(y=x, sr=sampling_rate)
Audio(x, rate=sampling_rate)

x = stretch(data)
mplt.figure(figsize=(14,4))
librosa.display.waveshow(y=x, sr=sampling_rate)
Audio(x, rate=sampling_rate)

x = shift(data)
mplt.figure(figsize=(14,4))
librosa.display.waveshow(y=x, sr=sampling_rate)
Audio(x, rate=sampling_rate)

x = pitch(data, sampling_rate)
mplt.figure(figsize=(14,4))
librosa.display.waveshow(y=x, sr=sampling_rate)
Audio(x, rate=sampling_rate)

def extractFeature(fileName, mfcc, chroma, mel): 
    with soundfile.SoundFile(fileName) as soundFile:
        X = soundFile.read(dtype="float32")
        sampleRate=soundFile.samplerate
        if chroma:
            stft=nup.abs(librosa.stft(X))
        result=nup.array([])
        if mfcc:
            mfccs=nup.mean(librosa.feature.mfcc(y=X, sr=sampleRate, n_mfcc=40).T, axis=0)
            result=nup.hstack((result, mfccs))
        if chroma:
            chroma=nup.mean(librosa.feature.chroma_stft(S=stft, sr=sampleRate).T, axis=0)
            result=nup.hstack((result, chroma))
        if mel:
            mel=nup.mean(librosa.feature.melspectrogram(X, sr=sampleRate).T, axis=0)
            result=nup.hstack((result, mel))
    return result

emotions={
    '01':'neutral', 
    '02':'calm', 
    '03':'happy', 
    '04':'sad', 
    '05':'angry', 
    '06':'fearful', 
    '07':'disgust', 
    '08':'surprised'
}
observedEmotions=['calm', 'happy', 'fearful', 'disgust']

from sklearn.model_selection import train_test_split
def loadData(test_size=0.2):
    x,y=[],[]
    for file in glob.glob("E:\\clg book materials\\SEM-5\\RavdessData\\Actor_*\\*.wav"): 
        fileName=os.path.basename(file)
        emotion1=emotions[fileName.split("-")[2]] 
        if emotion1 not in observedEmotions:
            continue
        feature=extractFeature(file, mfcc=True, chroma=True, mel=True)
        x.append(feature)
        y.append(emotion1)
    return train_test_split(nup.array(x), y, test_size=test_size, random_state=9)

x_train,x_test,y_train,y_test=loadData(test_size=0.23)

print((x_train.shape[0], x_test.shape[0]))

print(f'Features extracted: {x_train.shape[1]}')

model=MLPClassifier(alpha=0.01, batch_size=256, epsilon=1e-08, hidden_layer_sizes=(300,), learning_rate='adaptive', max_iter=500)

model.fit(x_train, y_train)

expected_Of_y = y_test
yPred=model.predict(x_test)

print(metrics.confusion_matrix(expected_Of_y,yPred))

print(classification_report(y_test,yPred))

accuracy=accuracy_score(y_true=y_test, y_pred=yPred)
print("Accuracy: {:.2f}%".format(accuracy*100))